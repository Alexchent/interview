<?php/** * 观察者模式的思想就是一个对象发生一个事件后，逐一通知监听着这个对象的监听者，监听者可以对这个事件马上做出响应。 */interface ObserverInterface {    /**     * 处理通知     * @return mixed     */    public function handle(ObservableInterface $observable);}interface ObservableInterface {    //添加一个观察者    public function attach(ObserverInterface $observer);    //接触观察者    public function detach(ObserverInterface $observer);    /**     * 通知观察者     * @return mixed     */    public function notify();}class Observable implements ObservableInterface {    private $_observers = [];    public $_name = "被观察者";    public function __get($name)    {        // TODO: Implement __get() method.        return $this->_name;    }    /**     * 注册一个观察者     * @param ObserverInterface $observer     */    public function attach(ObserverInterface $observer)    {        // TODO: Implement attach() method.        if (!in_array($observer, $this->_observers, true)) {            $this->_observers[] = $observer;        }    }    /**     * 移除一个观察者     * @param ObserverInterface $observer     */    public function detach(ObserverInterface $observer)    {        // TODO: Implement detach() method.        foreach ($this->_observers as $k => $v) {            if ($v === $observer) {                unset($this->_observers[$k]);            }        }    }    /**     * 通知观察者     * @return mixed|void     */    public function notify()    {        foreach ($this->_observers as $observer) {            $observer->handle($this);        }    }}class TeacherObserver implements ObserverInterface {    private $event;    public function __construct($event)    {        $this->event = $event;    }    public function handle(ObservableInterface $observable)    {        echo $observable->_name . $this->event;    }}// 注册一个被观察者对象$observable = new Observable();// 注册观察者们$observerExampleOne = new TeacherObserver('下班了，走去吃饭');// 附加观察者$observable->attach($observerExampleOne);// 被观察者通知观察者们$observable->notify();