<?php/** * Created by PhpStorm. * User: chentao * Date: 2021/7/3 * Time: 5:01 PM *//** * 根节点和树节点都要实现的接口 */interface NodeInterface{    /**     * 增加一个节点对象     *     * @return mixed     */    public function add(NodeInterface $composite);    /**     * 删除节点一个对象     *     * @return mixed     */    public function delete(NodeInterface $composite);    /**     * 实体类要实现的方法     *     * @return mixed     */    public function operation();    /**     * 打印对象组合     *     * @return mixed     */    public function printComposite();}/** * 文件实体 */class File implements NodeInterface{    /**     * 文件名称.     *     * @var string     */    private $_name = '';    /**     * 文件内容.     *     * @var string     */    private $_content = '';    /**     * 构造函数.     *     * @param string $name     */    public function __construct($name = '')    {        $this->_name = $name;    }    /**     * 魔法函数     * @param  string $name  属性名称     * @return mixed     */    public function __get($name='')    {        $name = '_' . $name;        return $this->$name;    }    /**     * 增加一个节点对象     *     * @return mixed     */    public function add(NodeInterface $composite)    {        throw new Exception('not support', 500);    }    /**     * 删除节点一个对象     *     * @return mixed     */    public function delete(NodeInterface $composite)    {        throw new Exception('not support', 500);    }    /**     * 打印对象组合.     *     * @return mixed     */    public function printComposite()    {        throw new Exception('not support', 500);    }    /**     * 实体类要实现的方法.     *     * @return mixed     */    public function operation($operation = '', $content = '')    {        switch ($operation) {            case 'write':                $this->_content .= $content;                echo 'write success';                break;            case 'read':                echo $this->_content;                break;            default:                throw new \Exception("not support", 400);                break;        }    }}/** * 文件夹实体 */class Folder implements NodeInterface{    /**     * 对象组合     * @var array     */    private $_composite = [];    /**     * 文件夹名称     * @var string     */    private $_name = '';    /**     * 构造函数     *     * @param string $name     */    public function __construct($name='')    {        $this->_name = $name;    }    /**     * 魔法函数     * @param  string $name  属性名称     * @return mixed     */    public function __get($name='')    {        $name = '_' . $name;        return $this->$name;    }    /**     * 增加一个节点对象     *     * @return void     */    public function add(NodeInterface $composite)    {        if (in_array($composite, $this->_composite, true)) {            return;        }        $this->_composite[] = $composite;    }    /**     * 删除节点一个对象     *     * @return void     */    public function delete(NodeInterface $composite)    {        $key = array_search($composite, $this->_composite, true);        if (!$key) {            throw new Exception("not found", 404);        }        unset($this->_composite[$key]);        $this->_composite = array_values($this->_composite);    }    /**     * 打印对象组合     *     * @return void     */    public function printComposite()    {        foreach ($this->_composite as $v) {            if ($v instanceof Folder) {                echo '---' . $v->name . "---\n";                $v->printComposite();                continue;            }            echo $v->name . "\n";        }    }    /**     * 实体类要实现的方法     *     * @return mixed     */    public function operation()    {        return;    }}// 文件和文件夹都具备节点的特征，又有一些差异，文件没有字目录，不能增加文件或删除文件// File类空实现了接口中的方法，这不符合接口隔离原则，这种方式在组合模式中被称作透明方式.try {    // 构建一个根目录    $root = new Folder('根目录');    // 根目录下添加一个test.php的文件和usr,mnt的文件夹    $testFile = new File('ccc.php');    $usr = new Folder('usr');    $mnt = new Folder('mnt');    $root->add($testFile);    $root->add($usr);    $root->add($mnt);    $usr->add($testFile);// usr目录下加一个test.php的文件    // 打印根目录文件夹节点    $root->printComposite();} catch (\Exception $e) {    echo $e->getMessage();}